{"ast":null,"code":"\"use strict\";import escape from'escape-string-regexp';import*as queryString from'query-string';import{findFocusedRoute}from\"./findFocusedRoute.js\";import{validatePathConfig}from\"./validatePathConfig.js\";export function getStateFromPath(path,options){const{initialRoutes,configs,configWithRegexes}=getConfigResources(options);const screens=options?.screens;let remaining=path.replace(/\\/+/g,'/').replace(/^\\//,'').replace(/\\?.*$/,'');remaining=remaining.endsWith('/')?remaining:`${remaining}/`;const prefix=options?.path?.replace(/^\\//,'');if(prefix){const normalizedPrefix=prefix.endsWith('/')?prefix:`${prefix}/`;if(!remaining.startsWith(normalizedPrefix)){return undefined;}remaining=remaining.replace(normalizedPrefix,'');}if(screens===undefined){const routes=remaining.split('/').filter(Boolean).map(segment=>{const name=decodeURIComponent(segment);return{name};});if(routes.length){return createNestedStateObject(path,routes,initialRoutes);}return undefined;}if(remaining==='/'){const match=configs.find(config=>config.path===''&&config.routeNames.every(name=>!configs.find(c=>c.screen===name)?.path));if(match){return createNestedStateObject(path,match.routeNames.map(name=>({name})),initialRoutes,configs);}return undefined;}let result;let current;const{routes,remainingPath}=matchAgainstConfigs(remaining,configWithRegexes);if(routes!==undefined){current=createNestedStateObject(path,routes,initialRoutes,configs);remaining=remainingPath;result=current;}if(current==null||result==null){return undefined;}return result;}const cachedConfigResources=new WeakMap();function getConfigResources(options){if(!options)return prepareConfigResources();const cached=cachedConfigResources.get(options);if(cached)return cached;const resources=prepareConfigResources(options);cachedConfigResources.set(options,resources);return resources;}function prepareConfigResources(options){if(options){validatePathConfig(options);}const initialRoutes=getInitialRoutes(options);const configs=getNormalizedConfigs(initialRoutes,options?.screens);checkForDuplicatedConfigs(configs);const configWithRegexes=getConfigsWithRegexes(configs);return{initialRoutes,configs,configWithRegexes};}function getInitialRoutes(options){const initialRoutes=[];if(options?.initialRouteName){initialRoutes.push({initialRouteName:options.initialRouteName,parentScreens:[]});}return initialRoutes;}function getNormalizedConfigs(initialRoutes,screens={}){return[].concat(...Object.keys(screens).map(key=>createNormalizedConfigs(key,screens,[],initialRoutes,[]))).sort((a,b)=>{if(a.pattern===b.pattern){return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));}if(a.pattern.startsWith(b.pattern)){return-1;}if(b.pattern.startsWith(a.pattern)){return 1;}const aParts=a.pattern.split('/');const bParts=b.pattern.split('/');for(let i=0;i<Math.max(aParts.length,bParts.length);i++){if(aParts[i]==null){return 1;}if(bParts[i]==null){return-1;}const aWildCard=aParts[i]==='*'||aParts[i].startsWith(':');const bWildCard=bParts[i]==='*'||bParts[i].startsWith(':');if(aWildCard&&bWildCard){continue;}if(aWildCard){return 1;}if(bWildCard){return-1;}}return bParts.length-aParts.length;});}function checkForDuplicatedConfigs(configs){configs.reduce((acc,config)=>{if(acc[config.pattern]){const a=acc[config.pattern].routeNames;const b=config.routeNames;const intersects=a.length>b.length?b.every((it,i)=>a[i]===it):a.every((it,i)=>b[i]===it);if(!intersects){throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);}}return Object.assign(acc,{[config.pattern]:config});},{});}function getConfigsWithRegexes(configs){return configs.map(c=>Object.assign({},c,{regex:c.regex?new RegExp(c.regex.source+'$'):undefined}));}const joinPaths=(...paths)=>[].concat(...paths.map(p=>p.split('/'))).filter(Boolean).join('/');const matchAgainstConfigs=(remaining,configs)=>{let routes;let remainingPath=remaining;for(const config of configs){if(!config.regex){continue;}const match=remainingPath.match(config.regex);if(match){const matchResult=config.pattern?.split('/').reduce((acc,p,index)=>{if(!p.startsWith(':')){return acc;}acc.pos+=1;const decodedParamSegment=decodeURIComponent(match[(acc.pos+1)*2].replace(/\\/$/,''));Object.assign(acc.matchedParams,{[p]:Object.assign(acc.matchedParams[p]||{},{[index]:decodedParamSegment})});return acc;},{pos:-1,matchedParams:{}});const matchedParams=matchResult.matchedParams||{};routes=config.routeNames.map(name=>{const routeConfig=configs.find(c=>{return c.screen===name&&config.pattern.startsWith(c.pattern);});const normalizedPath=routeConfig?.path.split('/').filter(Boolean).join('/');const numInitialSegments=routeConfig?.pattern.replace(new RegExp(`${escape(normalizedPath)}$`),'')?.split('/').length;const params=normalizedPath?.split('/').reduce((acc,p,index)=>{if(!p.startsWith(':')){return acc;}const offset=numInitialSegments?numInitialSegments-1:0;const value=matchedParams[p]?.[index+offset];if(value){const key=p.replace(/^:/,'').replace(/\\?$/,'');acc[key]=routeConfig?.parse?.[key]?routeConfig.parse[key](value):value;}return acc;},{});if(params&&Object.keys(params).length){return{name,params};}return{name};});remainingPath=remainingPath.replace(match[1],'');break;}}return{routes,remainingPath};};const createNormalizedConfigs=(screen,routeConfig,routeNames=[],initials,parentScreens,parentPattern)=>{const configs=[];routeNames.push(screen);parentScreens.push(screen);const config=routeConfig[screen];if(typeof config==='string'){const pattern=parentPattern?joinPaths(parentPattern,config):config;configs.push(createConfigItem(screen,routeNames,pattern,config));}else if(typeof config==='object'){let pattern;if(typeof config.path==='string'){if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';configs.push(createConfigItem(screen,routeNames,pattern,config.path,config.parse));}if(config.screens){if(config.initialRouteName){initials.push({initialRouteName:config.initialRouteName,parentScreens});}Object.keys(config.screens).forEach(nestedConfig=>{const result=createNormalizedConfigs(nestedConfig,config.screens,routeNames,initials,[...parentScreens],pattern??parentPattern);configs.push(...result);});}}routeNames.pop();return configs;};const createConfigItem=(screen,routeNames,pattern,path,parse)=>{pattern=pattern.split('/').filter(Boolean).join('/');const regex=pattern?new RegExp(`^(${pattern.split('/').map(it=>{if(it.startsWith(':')){return`(([^/]+\\\\/)${it.endsWith('?')?'?':''})`;}return`${it==='*'?'.*':escape(it)}\\\\/`;}).join('')})`):undefined;return{screen,regex,pattern,path,routeNames:[...routeNames],parse};};const findParseConfigForRoute=(routeName,flatConfig)=>{for(const config of flatConfig){if(routeName===config.routeNames[config.routeNames.length-1]){return config.parse;}}return undefined;};const findInitialRoute=(routeName,parentScreens,initialRoutes)=>{for(const config of initialRoutes){if(parentScreens.length===config.parentScreens.length){let sameParents=true;for(let i=0;i<parentScreens.length;i++){if(parentScreens[i].localeCompare(config.parentScreens[i])!==0){sameParents=false;break;}}if(sameParents){return routeName!==config.initialRouteName?config.initialRouteName:undefined;}}}return undefined;};const createStateObject=(initialRoute,route,isEmpty)=>{if(isEmpty){if(initialRoute){return{index:1,routes:[{name:initialRoute},route]};}else{return{routes:[route]};}}else{if(initialRoute){return{index:1,routes:[{name:initialRoute},Object.assign({},route,{state:{routes:[]}})]};}else{return{routes:[Object.assign({},route,{state:{routes:[]}})]};}}};const createNestedStateObject=(path,routes,initialRoutes,flatConfig)=>{let route=routes.shift();const parentScreens=[];let initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);parentScreens.push(route.name);const state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){let nestedState=state;while(route=routes.shift()){initialRoute=findInitialRoute(route.name,parentScreens,initialRoutes);const nestedStateIndex=nestedState.index||nestedState.routes.length-1;nestedState.routes[nestedStateIndex].state=createStateObject(initialRoute,route,routes.length===0);if(routes.length>0){nestedState=nestedState.routes[nestedStateIndex].state;}parentScreens.push(route.name);}}route=findFocusedRoute(state);route.path=path;const params=parseQueryParams(path,flatConfig?findParseConfigForRoute(route.name,flatConfig):undefined);if(params){route.params=Object.assign({},route.params,params);}return state;};const parseQueryParams=(path,parseConfig)=>{const query=path.split('?')[1];const params=queryString.parse(query);if(parseConfig){Object.keys(params).forEach(name=>{if(Object.hasOwnProperty.call(parseConfig,name)&&typeof params[name]==='string'){params[name]=parseConfig[name](params[name]);}});}return Object.keys(params).length?params:undefined;};","map":{"version":3,"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","configs","configWithRegexes","getConfigResources","screens","remaining","replace","endsWith","prefix","normalizedPrefix","startsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","match","find","config","routeNames","every","c","screen","result","current","remainingPath","matchAgainstConfigs","cachedConfigResources","WeakMap","prepareConfigResources","cached","get","resources","set","getInitialRoutes","getNormalizedConfigs","checkForDuplicatedConfigs","getConfigsWithRegexes","initialRouteName","push","parentScreens","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","join","localeCompare","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","intersects","it","Error","assign","regex","RegExp","source","joinPaths","paths","p","matchResult","index","pos","decodedParamSegment","matchedParams","routeConfig","normalizedPath","numInitialSegments","params","offset","value","parse","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"sources":["/Users/payalsah/Documents/FruitShopApp/node_modules/@react-navigation/core/src/getStateFromPath.tsx"],"sourcesContent":["import type {\n  InitialState,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\n\nimport { findFocusedRoute } from './findFocusedRoute';\nimport type { PathConfigMap } from './types';\nimport { validatePathConfig } from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\ntype ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\ntype ConfigResources = {\n  initialRoutes: InitialRouteConfig[];\n  configs: RouteConfig[];\n  configWithRegexes: RouteConfig[];\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport function getStateFromPath<ParamList extends {}>(\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  const { initialRoutes, configs, configWithRegexes } =\n    getConfigResources(options);\n\n  const screens = options?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n  if (prefix) {\n    // Make sure there is a trailing slash\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n    // If the path doesn't start with the prefix, it's not a match\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n\n    // Remove the prefix from the path\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        path,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(\n    remaining,\n    configWithRegexes\n  );\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\n/**\n * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n */\nconst cachedConfigResources = new WeakMap<Options<{}>, ConfigResources>();\n\nfunction getConfigResources<ParamList extends {}>(\n  options: Options<ParamList> | undefined\n) {\n  if (!options) return prepareConfigResources();\n\n  const cached = cachedConfigResources.get(options);\n\n  if (cached) return cached;\n\n  const resources = prepareConfigResources(options);\n\n  cachedConfigResources.set(options, resources);\n\n  return resources;\n}\n\nfunction prepareConfigResources(options?: Options<{}>) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const initialRoutes = getInitialRoutes(options);\n\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens);\n\n  checkForDuplicatedConfigs(configs);\n\n  const configWithRegexes = getConfigsWithRegexes(configs);\n\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes,\n  };\n}\n\nfunction getInitialRoutes(options?: Options<{}>) {\n  const initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  return initialRoutes;\n}\n\nfunction getNormalizedConfigs(\n  initialRoutes: InitialRouteConfig[],\n  screens: PathConfigMap<object> = {}\n) {\n  // Create a normalized configs array which will be easier to use\n  return ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          key,\n          screens as PathConfigMap<object>,\n          [],\n          initialRoutes,\n          []\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n}\n\nfunction checkForDuplicatedConfigs(configs: RouteConfig[]) {\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n}\n\nfunction getConfigsWithRegexes(configs: RouteConfig[]) {\n  return configs.map((c) => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n  }));\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!p.startsWith(':')) {\n            return acc;\n          }\n\n          // Path parameter so increment position for the segment\n          acc.pos += 1;\n\n          const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path\n          .split('/')\n          .filter(Boolean)\n          .join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            const value = matchedParams[p]?.[index + offset];\n\n            if (value) {\n              const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              acc[key] = routeConfig?.parse?.[key]\n                ? routeConfig.parse[key](value)\n                : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(\n          screen,\n          routeNames,\n          pattern!,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName\n          ? config.initialRouteName\n          : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { ...route, state: { routes: [] } }],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  path: string,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[]\n) => {\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  const state: InitialState = createStateObject(\n    initialRoute,\n    route,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  route.path = path;\n\n  const params = parseQueryParams(\n    path,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined\n  );\n\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n\n  return state;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (\n        Object.hasOwnProperty.call(parseConfig, name) &&\n        typeof params[name] === 'string'\n      ) {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}