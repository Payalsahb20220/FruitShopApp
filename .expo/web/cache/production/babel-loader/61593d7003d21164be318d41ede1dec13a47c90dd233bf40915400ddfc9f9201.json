{"ast":null,"code":"\"use strict\";const formatToList=items=>Object.entries(items).map(([key,value])=>`- ${key} (${value})`).join('\\n');export function validatePathConfig(config,root=true){const validation=Object.assign({path:'string',initialRouteName:'string',screens:'object'},root?null:{exact:'boolean',stringify:'object',parse:'object'});if(typeof config!=='object'||config===null){throw new Error(`Expected the configuration to be an object, but got ${JSON.stringify(config)}.`);}const validationErrors=Object.fromEntries(Object.keys(config).map(key=>{if(key in validation){const type=validation[key];const value=config[key];if(value!==undefined&&typeof value!==type){return[key,`expected '${type}', got '${typeof value}'`];}}else{return[key,'extraneous'];}return null;}).filter(Boolean));if(Object.keys(validationErrors).length){throw new Error(`Found invalid properties in the configuration:\\n${formatToList(validationErrors)}\\n\\nYou can only specify the following properties:\\n${formatToList(validation)}\\n\\nIf you want to specify configuration for screens, you need to specify them under a 'screens' property.\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);}if(root&&'path'in config&&typeof config.path==='string'&&config.path.includes(':')){throw new Error(`Found invalid path '${config.path}'. The 'path' in the top-level configuration cannot contain patterns for params.`);}if('screens'in config&&config.screens){Object.entries(config.screens).forEach(([_,value])=>{if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"names":["formatToList","items","Object","entries","map","key","value","join","validatePathConfig","config","root","validation","assign","path","initialRouteName","screens","exact","stringify","parse","Error","JSON","validationErrors","fromEntries","keys","type","undefined","filter","Boolean","length","includes","forEach","_"],"sources":["/Users/payalsah/Documents/FruitShopApp/node_modules/@react-navigation/core/src/validatePathConfig.tsx"],"sourcesContent":["const formatToList = (items: Record<string, string>) =>\n  Object.entries(items)\n    .map(([key, value]) => `- ${key} (${value})`)\n    .join('\\n');\n\nexport function validatePathConfig(config: unknown, root = true) {\n  const validation = {\n    path: 'string',\n    initialRouteName: 'string',\n    screens: 'object',\n    ...(root\n      ? null\n      : {\n          exact: 'boolean',\n          stringify: 'object',\n          parse: 'object',\n        }),\n  };\n\n  if (typeof config !== 'object' || config === null) {\n    throw new Error(\n      `Expected the configuration to be an object, but got ${JSON.stringify(\n        config\n      )}.`\n    );\n  }\n\n  const validationErrors = Object.fromEntries(\n    Object.keys(config)\n      .map((key) => {\n        if (key in validation) {\n          const type = validation[key as keyof typeof validation];\n          // @ts-expect-error: we know the key exists\n          const value = config[key];\n\n          if (value !== undefined && typeof value !== type) {\n            return [key, `expected '${type}', got '${typeof value}'`];\n          }\n        } else {\n          return [key, 'extraneous'];\n        }\n\n        return null;\n      })\n      .filter(Boolean) as [string, string][]\n  );\n\n  if (Object.keys(validationErrors).length) {\n    throw new Error(\n      `Found invalid properties in the configuration:\\n${formatToList(\n        validationErrors\n      )}\\n\\nYou can only specify the following properties:\\n${formatToList(\n        validation\n      )}\\n\\nIf you want to specify configuration for screens, you need to specify them under a 'screens' property.\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`\n    );\n  }\n\n  if (\n    root &&\n    'path' in config &&\n    typeof config.path === 'string' &&\n    config.path.includes(':')\n  ) {\n    throw new Error(\n      `Found invalid path '${config.path}'. The 'path' in the top-level configuration cannot contain patterns for params.`\n    );\n  }\n\n  if ('screens' in config && config.screens) {\n    Object.entries(config.screens).forEach(([_, value]) => {\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n"],"mappings":"aAAA,KAAM,CAAAA,YAAY,CAAIC,KAA6B,EACjDC,MAAM,CAACC,OAAO,CAACF,KAAK,CAAC,CAClBG,GAAG,CAAC,CAAC,CAACC,GAAG,CAAEC,KAAK,CAAC,GAAK,KAAKD,GAAG,KAAKC,KAAK,GAAG,CAAC,CAC5CC,IAAI,CAAC,IAAI,CAAC,CAEf,MAAO,SAAS,CAAAC,kBAAkBA,CAACC,MAAe,CAAEC,IAAI,CAAG,IAAI,CAAE,CAC/D,KAAM,CAAAC,UAAU,CAAAT,MAAA,CAAAU,MAAA,EACdC,IAAI,CAAE,QAAQ,CACdC,gBAAgB,CAAE,QAAQ,CAC1BC,OAAO,CAAE,QAAQ,EACbL,IAAI,CACJ,IAAI,CACJ,CACEM,KAAK,CAAE,SAAS,CAChBC,SAAS,CAAE,QAAQ,CACnBC,KAAK,CAAE,QACT,CAAC,CACN,CAED,GAAI,MAAO,CAAAT,MAAM,GAAK,QAAQ,EAAIA,MAAM,GAAK,IAAI,CAAE,CACjD,KAAM,IAAI,CAAAU,KAAK,CACb,uDAAuDC,IAAI,CAACH,SAAS,CACnER,MACF,CAAC,GACH,CAAC,CACH,CAEA,KAAM,CAAAY,gBAAgB,CAAGnB,MAAM,CAACoB,WAAW,CACzCpB,MAAM,CAACqB,IAAI,CAACd,MAAM,CAAC,CAChBL,GAAG,CAAEC,GAAG,EAAK,CACZ,GAAIA,GAAG,GAAI,CAAAM,UAAU,CAAE,CACrB,KAAM,CAAAa,IAAI,CAAGb,UAAU,CAACN,GAAG,CAA4B,CAEvD,KAAM,CAAAC,KAAK,CAAGG,MAAM,CAACJ,GAAG,CAAC,CAEzB,GAAIC,KAAK,GAAKmB,SAAS,EAAI,MAAO,CAAAnB,KAAK,GAAKkB,IAAI,CAAE,CAChD,MAAO,CAACnB,GAAG,CAAE,aAAamB,IAAI,WAAW,MAAO,CAAAlB,KAAK,GAAG,CAAC,CAC3D,CACF,CAAC,IAAM,CACL,MAAO,CAACD,GAAG,CAAE,YAAY,CAAC,CAC5B,CAEA,MAAO,KAAI,CACb,CAAC,CAAC,CACDqB,MAAM,CAACC,OAAO,CACnB,CAAC,CAED,GAAIzB,MAAM,CAACqB,IAAI,CAACF,gBAAgB,CAAC,CAACO,MAAM,CAAE,CACxC,KAAM,IAAI,CAAAT,KAAK,CACb,mDAAmDnB,YAAY,CAC7DqB,gBACF,CAAC,uDAAuDrB,YAAY,CAClEW,UACF,CAAC,kOACH,CAAC,CACH,CAEA,GACED,IAAI,EACJ,MAAM,EAAI,CAAAD,MAAM,EAChB,MAAO,CAAAA,MAAM,CAACI,IAAI,GAAK,QAAQ,EAC/BJ,MAAM,CAACI,IAAI,CAACgB,QAAQ,CAAC,GAAG,CAAC,CACzB,CACA,KAAM,IAAI,CAAAV,KAAK,CACb,uBAAuBV,MAAM,CAACI,IAAI,kFACpC,CAAC,CACH,CAEA,GAAI,SAAS,EAAI,CAAAJ,MAAM,EAAIA,MAAM,CAACM,OAAO,CAAE,CACzCb,MAAM,CAACC,OAAO,CAACM,MAAM,CAACM,OAAO,CAAC,CAACe,OAAO,CAAC,CAAC,CAACC,CAAC,CAAEzB,KAAK,CAAC,GAAK,CACrD,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC7BE,kBAAkB,CAACF,KAAK,CAAE,KAAK,CAAC,CAClC,CACF,CAAC,CAAC,CACJ,CACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}