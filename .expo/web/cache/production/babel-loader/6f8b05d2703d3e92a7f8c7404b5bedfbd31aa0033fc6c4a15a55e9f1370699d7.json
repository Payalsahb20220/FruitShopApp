{"ast":null,"code":"\"use strict\";import*as queryString from'query-string';import{validatePathConfig}from\"./validatePathConfig.js\";const getActiveRoute=state=>{const route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};const cachedNormalizedConfigs=new WeakMap();const getNormalizedConfigs=options=>{if(!options?.screens)return{};const cached=cachedNormalizedConfigs.get(options?.screens);if(cached)return cached;const normalizedConfigs=createNormalizedConfigs(options.screens);cachedNormalizedConfigs.set(options.screens,normalizedConfigs);return normalizedConfigs;};export function getPathFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){validatePathConfig(options);}const configs=getNormalizedConfigs(options);let path='/';let current=state;const allParams={};while(current){let index=typeof current.index==='number'?current.index:0;let route=current.routes[index];let pattern;let focusedParams;const focusedRoute=getActiveRoute(state);let currentOptions=configs;const nestedRouteNames=[];let hasNext=true;while(route.name in currentOptions&&hasNext){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){const stringify=currentOptions[route.name]?.stringify;const currentParams=Object.fromEntries(Object.entries(route.params).map(([key,value])=>[key,stringify?.[key]?stringify[key](value):String(value)]));if(pattern){Object.assign(allParams,currentParams);}if(focusedRoute===route){focusedParams=Object.assign({},currentParams);pattern?.split('/').filter(p=>p.startsWith(':')).forEach(p=>{const name=getParamName(p);if(focusedParams){delete focusedParams[name];}});}}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;const nextRoute=route.state.routes[index];const nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=pattern.split('/').map(p=>{const name=getParamName(p);if(p==='*'){return route.name;}if(p.startsWith(':')){const value=allParams[name];if(value===undefined&&p.endsWith('?')){return'';}return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g,char=>encodeURIComponent(char));}return encodeURIComponent(p);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(const param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}const query=queryString.stringify(focusedParams,{sort:false});if(query){path+=`?${query}`;}}current=route.state;}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;if(options?.path){path=joinPaths(options.path,path);}return path;}const getParamName=pattern=>pattern.replace(/^:/,'').replace(/\\?$/,'');const joinPaths=(...paths)=>[].concat(...paths.map(p=>p.split('/'))).filter(Boolean).join('/');const createConfigItem=(config,parentPattern)=>{if(typeof config==='string'){const pattern=parentPattern?joinPaths(parentPattern,config):config;return{pattern};}if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}const pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';const screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:pattern?.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens};};const createNormalizedConfigs=(options,pattern)=>Object.fromEntries(Object.entries(options).map(([name,c])=>{const result=createConfigItem(c,pattern);return[name,result];}));","map":{"version":3,"names":["queryString","validatePathConfig","getActiveRoute","state","route","index","routes","length","cachedNormalizedConfigs","WeakMap","getNormalizedConfigs","options","screens","cached","get","normalizedConfigs","createNormalizedConfigs","set","getPathFromState","Error","configs","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","Object","fromEntries","entries","map","key","value","String","assign","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","replace","char","encodeURIComponent","param","query","sort","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","c","result"],"sources":["/Users/payalsah/Documents/FruitShopApp/node_modules/@react-navigation/core/src/getPathFromState.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport type { PathConfig, PathConfigMap } from './types';\nimport { validatePathConfig } from './validatePathConfig';\n\ntype Options<ParamList extends {}> = {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nconst cachedNormalizedConfigs = new WeakMap<\n  PathConfigMap<{}>,\n  Record<string, ConfigItem>\n>();\n\nconst getNormalizedConfigs = (options?: Options<{}>) => {\n  if (!options?.screens) return {};\n\n  const cached = cachedNormalizedConfigs.get(options?.screens);\n\n  if (cached) return cached;\n\n  const normalizedConfigs = createNormalizedConfigs(options.screens);\n\n  cachedNormalizedConfigs.set(options.screens, normalizedConfigs);\n\n  return normalizedConfigs;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport function getPathFromState<ParamList extends {}>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const configs = getNormalizedConfigs(options);\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    const focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    const nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = Object.fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            // Valid characters according to\n            // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n            return String(value).replace(\n              /[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g,\n              (char) => encodeURIComponent(char)\n            );\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  // Include the root path if specified\n  if (options?.path) {\n    path = joinPaths(options.path, path);\n  }\n\n  return path;\n}\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true\n      ? joinPaths(parentPattern || '', config.path || '')\n      : config.path || '';\n\n  const screens = config.screens\n    ? createNormalizedConfigs(config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}