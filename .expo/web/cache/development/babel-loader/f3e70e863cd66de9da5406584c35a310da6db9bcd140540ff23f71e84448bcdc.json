{"ast":null,"code":"var _jsxFileName = \"/Users/payalsah/Documents/FruitShopApp/screens/LoginScreen.tsx\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useNavigation } from '@react-navigation/native';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../firebaseConfig';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginScreen() {\n  const [emailOrMobile, setEmailOrMobile] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigation = useNavigation();\n  const showAlert = (title, message) => {\n    if (Platform.OS === 'web') {\n      alert(`${title}: ${message}`);\n    } else {\n      Alert.alert(title, message);\n    }\n  };\n  const handleLogin = async () => {\n    if (!emailOrMobile || !password) {\n      showAlert(\"Error\", \"Both fields are required!\");\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, emailOrMobile, password);\n      const user = userCredential.user;\n      if (!user.emailVerified) {\n        showAlert(\"Email Not Verified\", \"Please verify your email before logging in.\");\n        return;\n      }\n      console.log(\"User logged in:\", user);\n      showAlert(\"Success\", \"Logged in successfully!\");\n      navigation.navigate(\"Home\");\n    } catch (error) {\n      console.error(\"Login Error:\", error.message);\n      AshowAlert(\"Error\", error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Text, {\n      style: styles.title,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter Email\",\n      placeholderTextColor: \"#aaa\",\n      value: emailOrMobile,\n      onChangeText: setEmailOrMobile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      style: styles.input,\n      placeholder: \"Enter Password\",\n      placeholderTextColor: \"#aaa\",\n      secureTextEntry: true,\n      value: password,\n      onChangeText: setPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      style: [styles.button, isLoading && styles.buttonDisabled],\n      onPress: handleLogin,\n      disabled: isLoading,\n      children: isLoading ? _jsxDEV(ActivityIndicator, {\n        color: \"#fff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) : _jsxDEV(Text, {\n        style: styles.buttonText,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), _jsxDEV(TouchableOpacity, {\n      onPress: () => navigation.navigate('Signup'),\n      style: styles.linkButton,\n      children: _jsxDEV(Text, {\n        style: styles.linkText,\n        children: \"New here? Sign up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20\n  },\n  input: {\n    width: '90%',\n    backgroundColor: '#f9f9f9',\n    padding: 15,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    marginBottom: 20\n  },\n  button: {\n    backgroundColor: '#FFA500',\n    padding: 15,\n    borderRadius: 8,\n    width: '80%',\n    alignItems: 'center',\n    marginVertical: 10\n  },\n  buttonDisabled: {\n    backgroundColor: '#FFC04C'\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold'\n  },\n  linkButton: {\n    marginTop: 10\n  },\n  linkText: {\n    color: '#FFA500',\n    fontSize: 14,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","Alert","ActivityIndicator","useNavigation","signInWithEmailAndPassword","auth","Platform","jsxDEV","_jsxDEV","LoginScreen","emailOrMobile","setEmailOrMobile","password","setPassword","isLoading","setIsLoading","navigation","showAlert","title","message","OS","alert","handleLogin","userCredential","user","emailVerified","console","log","navigate","error","AshowAlert","style","styles","container","children","fileName","_jsxFileName","lineNumber","columnNumber","input","placeholder","placeholderTextColor","value","onChangeText","secureTextEntry","button","buttonDisabled","onPress","disabled","color","buttonText","linkButton","linkText","create","flex","justifyContent","alignItems","backgroundColor","padding","fontSize","fontWeight","marginBottom","width","borderRadius","borderWidth","borderColor","marginVertical","marginTop"],"sources":["/Users/payalsah/Documents/FruitShopApp/screens/LoginScreen.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert, ActivityIndicator } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { RootStackParamList } from '../navigation/types';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../firebaseConfig';\nimport { Platform } from 'react-native';\n\n\ntype LoginScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'Login'>;\n\nexport default function LoginScreen() {\n  const [emailOrMobile, setEmailOrMobile] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false); // For button state\n  const navigation = useNavigation<LoginScreenNavigationProp>();\n\n  const showAlert = (title: string, message: string) => {\n    if (Platform.OS === 'web') {\n      alert(`${title}: ${message}`);\n    } else {\n      Alert.alert(title, message);\n    }\n  };\n\n  const handleLogin = async () => {\n    if (!emailOrMobile || !password) {\n      showAlert(\"Error\", \"Both fields are required!\");\n      return;\n    }\n\n    setIsLoading(true); // Button in \"loading\" state\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, emailOrMobile, password);\n      const user = userCredential.user;\n\n      // Check if email is verified\n      if (!user.emailVerified) {\n        showAlert(\n          \"Email Not Verified\",\n          \"Please verify your email before logging in.\"\n        );\n        return;\n      }\n\n      console.log(\"User logged in:\", user);\n      showAlert(\"Success\", \"Logged in successfully!\");\n      navigation.navigate(\"Home\"); // Navigate after success\n    } catch (error: any) {\n      console.error(\"Login Error:\", error.message);\n      AshowAlert(\"Error\", error.message);\n    } finally {\n      setIsLoading(false); // Reset button state\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Login</Text>\n      <TextInput\n        style={styles.input}\n        placeholder=\"Enter Email\"\n        placeholderTextColor=\"#aaa\"\n        value={emailOrMobile}\n        onChangeText={setEmailOrMobile}\n      />\n      <TextInput\n        style={styles.input}\n        placeholder=\"Enter Password\"\n        placeholderTextColor=\"#aaa\"\n        secureTextEntry\n        value={password}\n        onChangeText={setPassword}\n      />\n      <TouchableOpacity\n        style={[styles.button, isLoading && styles.buttonDisabled]}\n        onPress={handleLogin}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <ActivityIndicator color=\"#fff\" />\n        ) : (\n          <Text style={styles.buttonText}>Login</Text>\n        )}\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => navigation.navigate('Signup')}\n        style={styles.linkButton}\n      >\n        <Text style={styles.linkText}>New here? Sign up</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#333',\n    marginBottom: 20,\n  },\n  input: {\n    width: '90%',\n    backgroundColor: '#f9f9f9',\n    padding: 15,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#ddd',\n    marginBottom: 20,\n  },\n  button: {\n    backgroundColor: '#FFA500',\n    padding: 15,\n    borderRadius: 8,\n    width: '80%',\n    alignItems: 'center',\n    marginVertical: 10,\n  },\n  buttonDisabled: {\n    backgroundColor: '#FFC04C', // Lighter orange for the disabled state\n  },\n  buttonText: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  linkButton: {\n    marginTop: 10,\n  },\n  linkText: {\n    color: '#FFA500',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}